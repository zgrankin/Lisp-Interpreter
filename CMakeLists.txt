cmake_minimum_required(VERSION 3.5)
project(VTSCRIPT CXX)

# EDIT
# add any files you create related to the interpreter here
# excluding unit tests
set(interpreter_src
  tokenize.hpp tokenize.cpp
  expression.hpp expression.cpp
  environment.hpp environment.cpp
  interpreter.hpp interpreter.cpp
  )

# EDIT
# add any files you create related to unit testing here
set(test_src
  catch.hpp
  unittests.cpp
  test_interpreter.cpp
  test_expression.cpp
  test_tokenize.cpp
  test_environment.cpp
)

# EDIT
# add any files you create related to the vtscript program here
set(vtscript_src
  ${interpreter_src}
  vtscript.cpp
  )

set(CMAKE_EXPORT_COMPILE_COMMANDS 1)


# ------------------------------------------------
# You should not need to edit any files below here
# ------------------------------------------------

# create the vtscript executable
add_executable(vtscript ${vtscript_src})
set_property(TARGET vtscript PROPERTY CXX_STANDARD 11)

# setup testing
set(TEST_FILE_DIR "${CMAKE_SOURCE_DIR}/tests")

configure_file(${CMAKE_SOURCE_DIR}/test_config.hpp.in 
  ${CMAKE_BINARY_DIR}/test_config.hpp)

include_directories(${CMAKE_BINARY_DIR})

add_executable(unittests ${interpreter_src} ${test_src})
set_property(TARGET unittests PROPERTY CXX_STANDARD 11)

enable_testing()
add_test(unittests unittests)



SET(GCC_COVERAGE_COMPILE_FLAGS "-g -O0 -fprofile-arcs -ftest-coverage")

# On Linux, using GCC, to enable coverage on tests -DCOVERAGE=TRUE
if(UNIX AND NOT APPLE AND CMAKE_COMPILER_IS_GNUCXX AND COVERAGE)
  message("Enabling Test Coverage")
  set_target_properties(unittests PROPERTIES COMPILE_FLAGS ${GCC_COVERAGE_COMPILE_FLAGS} )
  target_link_libraries(unittests gcov)
  add_custom_target(coverage
    COMMAND ${CMAKE_COMMAND} -E env "ROOT=${CMAKE_CURRENT_SOURCE_DIR}"
    ${CMAKE_CURRENT_SOURCE_DIR}/coverage.sh) 
endif()